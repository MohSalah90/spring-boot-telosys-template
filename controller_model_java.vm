/*
*  Copyright (c) 2019. All right reserved
* Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
* Generated by $generator.name ( version $generator.version )
*/
package ${target.javaPackageFromFolder(${SRC})};

import ${ROOT_PKG}.${ENTITY_PKG}.${entity.name};
import ${ROOT_PKG}.${SERVICE_INTERFACE_MODULE_PKG}.${entity.name}Service;


import ${ROOT_PKG}.shared.common.Common;
import ${ROOT_PKG}.shared.response.BaseResponse;
import ${ROOT_PKG}.shared.constants.ApplicationMessage;
import ${ROOT_PKG}.shared.pagination.filter.FilterCondition;
import ${ROOT_PKG}.shared.pagination.filter.FilterOperation;
import ${ROOT_PKG}.shared.pagination.filter.FilterSpecifications;
import ${ROOT_PKG}.shared.pagination.PageRequestBuilder;
import ${ROOT_PKG}.shared.response.PageResponse;
import ${ROOT_PKG}.shared.pagination.SearchRequest;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.UUID;


/**
* <h2>${entity.name}Controller</h2>
* @author ${AUTHOR_NAME}
*/
@RestController
@RequestMapping("/api")
@Api(tags = {"${entity.name}Controller"})
public class ${entity.name}Controller {


	private final ${entity.name}Service entityService;

	private static final String ENTITY_TITLE = "${entity.name}";


 	public ${entity.name}Controller (${entity.name}Service entityService, ${entity.name}Mapper entityMapper) {
		this.entityService = entityService;
		this.mapper = entityMapper;
	}


@ApiOperation(value = "Create a new data for domain", response = BaseResponse.class)
@ApiResponses(value = {@ApiResponse(code = 201, message = "Created successfully"),
@ApiResponse(code = 401, message = "You are not authorized to view the resource"),
@ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
@ApiResponse(code = 404, message = "The resource you were trying to reach is not found"),
@ApiResponse(code = 400, message = "something went wrong! ")})
@PostMapping(value = "/${entity.name.toLowerCase()}")
public ResponseEntity<BaseResponse> create${entity.name}(@RequestBody @Valid ${entity.name} dto) {

    // process to save data
    ${entity.name} d = entityService.create(mapper.toEntity(dto));
    if (d != null) {
    return new ResponseEntity<>(
    new BaseResponse(mapper.toDto(d), ApplicationMessage.SUCCESS_MESSAGE_SAVE_ENTITY, true),
    HttpStatus.CREATED);
    } else {
    return new ResponseEntity<>(new BaseResponse(null, ApplicationMessage.ERROR_MESSAGE_SAVE_ENTITY, false),
    HttpStatus.BAD_REQUEST);
    }

 }


}
