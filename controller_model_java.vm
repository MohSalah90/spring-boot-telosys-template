/*
*  Copyright (c) 2019. All right reserved
* Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
* Generated by $generator.name ( version $generator.version )
*/
package ${target.javaPackageFromFolder(${SRC})};

import ${ROOT_PKG}.${ENTITY_PKG}.${entity.name};
import ${ROOT_PKG}.${SERVICE_INTERFACE_PKG}.${entity.name}Service;


import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.util.List;


/**
* <h2>${entity.name}Controller</h2>
*/
@RestController
@RequestMapping("/api")
public class ${entity.name}Controller {


	private final ${entity.name}Service entityService;

	private static final String ENTITY_TITLE = "${entity.name}";


 	public ${entity.name}Controller (${entity.name}Service entityService) {
		this.entityService = entityService;
	}


	@PostMapping(value = "/${entity.name.toLowerCase()}")
	public ResponseEntity<${entity.name}> create${entity.name}(@RequestBody @Valid ${entity.name} model) {

   		 ${entity.name} data = entityService.create(model);
    		if (data != null) {
    			return new ResponseEntity<>(data,HttpStatus.CREATED);
  			  } else {
    			return new ResponseEntity<>(null,HttpStatus.BAD_REQUEST);
   			 }
    }

    @GetMapping(value = "/${entity.name.toLowerCase()}")
    public ResponseEntity<List<${entity.name}>> getAll${entity.name}() {
        List<${entity.name}> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

        @GetMapping(value = "/${entity.name.toLowerCase()}/{id}")
    public ResponseEntity<${entity.name}> getOne${entity.name}(@PathVariable("id") long id) {

            ${entity.name} e = entityService.getOne(id);
            if (e == null) {
            	return new ResponseEntity<>(null,HttpStatus.NOT_FOUND);
            }
            return new ResponseEntity<>(e, HttpStatus.OK);
    }


}
